// Graph with Edges and Vertices - Canaon

import java.util.*;

class Graph {
    private Map<Integer, List<Integer>> adjacencyList;

    public Graph() {
        this.adjacencyList = new HashMap<>();
    }

    public void addVertex(int vertex) {
        adjacencyList.put(vertex, new ArrayList<>());
    }

    public void addEdge(int source, int destination) {
        // Add Edge from Source to Destination
        adjacencyList.get(source).add(destination);

        // Add Edge from Destination to Source (Undirected Graph)
        adjacencyList.get(destination).add(source);
    }

    public void displayGraph() {
        for (Map.Entry<Integer, List<Integer>> entry : adjacencyList.entrySet()) {
            int vertex = entry.getKey();
            List<Integer> neighbors = entry.getValue();

            for (int neighbor : neighbors) {
                System.out.println (vertex + " - " + neighbor);
            }
        }
    }
}

public class GraphOperations {
    public static void main(String[] args) {
        Graph graph = new Graph();

        // Adding Vertices
        graph.addVertex (1);
        graph.addVertex (2);
        graph.addVertex (3);
        graph.addVertex (4);
        graph.addVertex (5);
        graph.addVertex (6);

        // Adding Edges
        graph.addEdge (1, 2);
        graph.addEdge (1, 3);
        graph.addEdge (2, 4);
        graph.addEdge (3, 4);
        graph.addEdge (2, 5);
        graph.addEdge (4, 6);
        graph.addEdge (5, 6);

        // Displaying The Graph
        System.out.println ("Graph:");
        graph.displayGraph();
    }
}
