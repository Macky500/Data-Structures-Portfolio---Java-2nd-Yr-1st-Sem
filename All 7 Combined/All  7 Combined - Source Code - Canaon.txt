// All Combined 7 - Various Operations on Data Structures - Canaon

import java.util.*;

class DataStructuresProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println ("\nData Structures Operations");
            System.out.println ("1. List");
            System.out.println ("2. Linked List");
            System.out.println ("3. Stack");
            System.out.println ("4. Queue");
            System.out.println ("5. Tree");
            System.out.println ("6. Binary Tree");
            System.out.println ("7. Graph");
            System.out.println ("8. Exit");

            System.out.print ("\nEnter Your Choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    performListOperations();
                    break;

                case 2:
                    performLinkedListOperations();
                    break;

                case 3:
                    performStackOperations();
                    break;

                case 4:
                    performQueueOperations();
                    break;

                case 5:
                    performTreeOperations();
                    break;

                case 6:
                    performBinaryTreeOperations();
                    break;

                case 7:
                    performGraphOperations();
                    break;

                case 8:
                    System.out.println ("Exiting The Program.");
                    System.exit(0);

                default:
                    System.out.println ("Invalid Choice. Please Enter a Valid Option.");
            }
        }
    }

    private static void performListOperations() {
        // Creating a Simple List
        List<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(30);

        System.out.println ("List: " + list);
    }

    private static void performLinkedListOperations() {
        // Creating a Simple Linked List
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.add(15);
        linkedList.add(25);
        linkedList.add(35);

        System.out.println ("Linked List: " + linkedList);
    }

    private static void performStackOperations() {
        // Creating a Simple Stack
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(10);
        stack.push(15);

        System.out.println("Stack: " + stack);
    }

    private static void performQueueOperations() {
        // Creating a Simple Queue
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        queue.offer(2);
        queue.offer(3);

        System.out.println ("Queue: " + queue);
    }

    private static void performTreeOperations() {
        // Example: Creating Simple Tree
        TreeNode root = new TreeNode(1);
        TreeNode child1 = new TreeNode(2);
        TreeNode child2 = new TreeNode(3);
        TreeNode child3 = new TreeNode(4);

        root.children.add(child1);
        root.children.add(child2);
        child2.children.add(child3);

        System.out.println("Tree Created. Contents: ");
        printTree(root);
    }

    private static void performBinaryTreeOperations() {
        // Example: Creating Simple Binary Tree
        BinaryTreeNode root = new BinaryTreeNode(5);
        root.left = new BinaryTreeNode(3);
        root.right = new BinaryTreeNode(7);
        root.left.left = new BinaryTreeNode(2);
        root.left.right = new BinaryTreeNode(4);
        root.right.left = new BinaryTreeNode(6);
        root.right.right = new BinaryTreeNode(8);

        System.out.println("Binary Tree Created. Contents: ");
        printInOrder(root);
    }

    private static void performGraphOperations() {
        // Creating a Simple Graph
        int vertices = 5;
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            graph.add(new ArrayList<>());
        }

        // Adding Edges
        graph.get(0).add(1);
        graph.get(0).add(4);
        graph.get(1).add(3);
        graph.get(1).add(4);
        graph.get(2).add(1);
        graph.get(3).add(2);

        System.out.println ("Graph Created. Vertices: " + vertices + ", Edges: " + graph);
    }

    private static void printInOrder(BinaryTreeNode root) {
        if (root != null) {
            printInOrder(root.left);
            System.out.print(root.val + " ");
            printInOrder(root.right);
        }
    }

    private static void printTree(TreeNode root) {
        if (root != null) {
            System.out.print (root.val + " ");
            for (TreeNode child : root.children) {
                printTree(child);
            }
        }
    }

    // BinaryTreeNode Class for Binary Tree
    static class BinaryTreeNode {
        int val;
        BinaryTreeNode left, right;

        public BinaryTreeNode(int val) {
            this.val = val;
            this.left = this.right = null;
        }
    }

    // TreeNode Class for Tree
    static class TreeNode {
        int val;
        List<TreeNode> children;

        public TreeNode(int val) {
            this.val = val;
            this.children = new ArrayList<>();
        }
    }
}